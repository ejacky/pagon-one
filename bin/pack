#!/usr/bin/env php
<?php

define('ROOT_DIR', dirname(__DIR__) . '/vendor/pagon/pagon/lib');

$files = array(
    'Pagon/Fiber',
    'Pagon/EventEmitter',
    'Pagon/Middleware',
    'Pagon/Route',
    'Pagon/Router',
    'Pagon/Config',
    'Pagon/View',
    'Pagon/App',
    'Pagon/Http/Input',
    'Pagon/Http/Output',
    'Pagon/Cli/Input',
    'Pagon/Cli/Output',
    'Pagon/Engine/Jade',
    'Pagon/Exception/Pass',
    'Pagon/Exception/Stop',
    'assistant',
);

$codes = array();

foreach ($files as $file) {
    $path = ROOT_DIR . '/' . $file . '.php';
    if (strpos($file, 'Pagon/') === 0) {
        $namespace = str_replace('/', '\\', dirname($file));
    } else {
        $namespace = '';
    }
    $php = file_get_contents($path);
    $uses = get_uses($php);
    $php = remove_use_statement(remove_namespace(remove_comment(remove_php_tag($php))));

    if (!isset($codes[$namespace])) {
        $codes[$namespace] = array(
            'uses'      => array(),
            'codes'     => array(),
            'namespace' => $namespace,
        );
    }
    $codes[$namespace]['uses'] = array_unique(array_merge($uses, $codes[$namespace]['uses']));

    switch ($file) {
        case 'Pagon/App';
            $php = preg_replace("#const VERSION = '([0-9\.]+)';([\S\s]+?)\nclass#", "const VERSION = '$1';\n\nclass", $php);
            break;
    }

    $codes[$namespace]['codes'][] = $php;
}

$output = '';

foreach ($codes as $namespace => $info) {
    $output .= 'namespace ' . $namespace . " {\n";
    if ($info['uses']) {
        $output .= "\nuse " . join(";\nuse ", $info['uses']) . ";\n";
    }
    foreach ($info['codes'] as $code) {
        $output .= $code;
    }
    $output .= "\n}\n\n";
}

file_put_contents(dirname(__DIR__) . '/pagon1.php', "<?php\n\n" . $output);

function remove_namespace($php)
{
    return preg_replace('#\nnamespace .+?;#', '', $php);
}

function remove_php_tag($php)
{
    return preg_replace('#\<\?php\n#', '', $php);
}

function remove_use_statement($php)
{
    return preg_replace('#\nuse .*?;#', '', $php);
}

function remove_comment($php)
{
    return preg_replace('#\/\*\*([\s\S]+?)\*\/\n#', '', $php);
}

function get_uses($php)
{
    if (!preg_match_all('#\nuse (.+?);#', $php, $match)) {
        return array();
    }

    return $match[1];
}